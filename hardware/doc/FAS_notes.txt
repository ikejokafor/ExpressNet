Map Depth and Kernel depth fit in Quad

Map depth is spread across quads, kernel depth fits in quads

Map depth is spread across quads, kernel depth must be iterated


FAS can handle up to N AWPs
the partial map in buffer will be a fifo with a minimum of one row for now to keep up with system read and write latencies
the feature map in will be a small fifo 2 or 3x the amount of pixels that can come in from system memory
Each quad is going to send its data along with an ID identifying each quad it is
    Each AWP is going to be numbered 0 to N
        Each quad of each AWP is going to be numbered 0 to N
        THe ID is the concat of both
The FAS's will have config data to say which quads it may need to accumulate against
each QUAD slot is potentially connected to every other quad slot because it may have to accum with
    any other quad or quad subset
    
break QUADs into groups of four. Call them AWPs
Within an AWP there is only one case where quads have to accum across each other

0 Q
1 Q_C
2 Q_C
3 Q

    Quads 0 and 3 must accum
    
For pooling
    first cycle does subtraction, second cycle gets local max, then third cycle compares to global
    max for that window. For smaller window sizes, just make irrelvant values -infin


create communication pathway between software and hardware / model
inject model with real data to verify correct data flow
Finish hardware
    write FAS unit
    get into DSP's to load Bias
    throw down AXI interconnect


FAS is going to have 3 slave spaces
    1 for interconnect
    1 for FAS cfg
    1 for QUAD cfg
    
    
do not use vivado 2018.3.1

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
To initiate cnn processing

1) Do a target transaction to set configuration registers in the FAS
    
    fetch/store amounts/totals, data addresses, number of 1x1 kernels, number of 1x1 kernel iterations

2) Do a target transaction to target address [] to start the FAS

3) FAS will start to load the 1st iteration of 1x1 kernels from memory using initiator intf
    
    1x1 kernels should be arranged depthwise in memory (D, R, C)
    
    The number of 1x1 kernels and the depth of individual 1x1 kernels should be padded to a power 2
    
    The FAS can have multiple 1x1 conv pipelines to process multiple 1x1 kernels simaltaneously
       
    The FAS will coordinate the incoming data to the correct 1x1 conv pip fifo
    
        The initiator read data bus may contain multiple 1x1 values, and the FAS will count them as them come in,
        
        Data comes in depth size, so once a particular depth is reached, the incoming data is transfered to the next availble
            conv 1x1 pip bram
            
    Conclusion of this process is signified by the completion of reading kernel data ie init_read_cmpl for the 1x1 kernel data memory transaction ID

    FAS will then start loading 1x1 kernel bias data
    
4)  Similar to step 3, only differnce is that the data is put in a dwc fifo so singular bias data can be loaded sequentially
        to each conv 1x1 pip kernel bias fifo
    
    Conclusion of this process is signified by the completion of reading kernel bias data ie init_read_cmpl for the 1x1 kernel bias data memory transaction ID

    FAS will then start configuring fetching and configuring AWPs

5)  AWP configuration data should be laid out sequentially in memory

    
    Conclusion of this process is signified by the completion of reading AWP cfg data ie init_read_cmpl for the 1x1 AWP cfg data memory transaction ID

    FAS will then send signal to start the AWPs
    
6)  FAS will send trans packet to AWPs   


    Conclusion of this process is signified by

    FAS will then be in the active phas
    
7)  During the active phase